dogma_v1 utf-8
- identifier  = bonjson
- description = Binary Object Notation for JSON
- reference   = https://bonjson.org
- dogma       = https://github.com/kstenerud/dogma/blob/master/v1/dogma_v1.0.md

document          = byte_order(lsb, ordered_document);
ordered_document  = value;

value             = string | number | array | object | boolean | null;

# Types

string            = u8(0xff) & char_string* & u8(0xff);

number            = int_small | int_8 | int_16 | int_24 | int_32 | int_40 | int_48 | int_56
                  | int_64 | uint_64 | float_16 | float_32 | float_64 | big_number;
int_small         = u8(0x00~0xea);
int_8             = u8(0xf1) & s8(~);
int_16            = u8(0xf2) & s16(~);
int_24            = u8(0xf3) & s24(~);
int_32            = u8(0xf4) & s32(~);
int_40            = u8(0xf5) & s40(~);
int_48            = u8(0xf6) & s48(~);
int_56            = u8(0xf7) & s56(~);
int_64            = u8(0xf8) & s64(~);
uint_64           = u8(0xf9) & u64(~);
float_16          = u8(0xfc) & f16(~);
float_32          = u8(0xfd) & f32(~);
float_64          = u8(0xfe) & f64(~);
big_number        = big_number_pos | big_number_neg;
big_number_pos    = u8(0xfa) & big_number_value;
big_number_neg    = u8(0xfb) & big_number_value;
big_number_value  = var(header, big_number_header)
                  & ordered(uint(header.sig_length*8, ~))
                  & ordered(zigzag(uint(header.exp_length*8, ~)))
                  ;
big_number_header = uleb128(uany(var(sig_length, ~)) & u2(var(exp_length, ~)));

array             = u8(0xeb) & value* & end_container;
object            = u8(0xec) & (string & value)* & end_container;
end_container     = u8(0xed);

boolean           = true | false;
false             = u8(0xee);
true              = u8(0xef);

null              = u8(0xf0);

# Primitives & Functions

s8(v)             = sint(8, v);
s16(v)            = ordered(sint(16, v));
s24(v)            = ordered(sint(24, v));
s32(v)            = ordered(sint(32, v));
s40(v)            = ordered(sint(40, v));
s48(v)            = ordered(sint(48, v));
s56(v)            = ordered(sint(56, v));
s64(v)            = ordered(sint(64, v));
u64(v)            = ordered(uint(64, v));
u2(v)             = uint(2, v);
u8(v)             = uint(8, v);
uany(v)           = uint(~,v);
f16(v)            = ordered(bfloat16(v));
f32(v)            = ordered(float(32, v));
f64(v)            = ordered(float(64, v));

char_string       = '\[0]' ~ '\[10ffff]'; # JSON technically supports unassigned and invalid codepoints

bfloat16(v: bits): bits = """https://en.wikipedia.org/wiki/Bfloat16_floating-point_format""";
uleb128(v: bits): bits = """https://en.wikipedia.org/wiki/LEB128#Unsigned_LEB128""";
zigzag(v: bits): bits = """https://en.wikipedia.org/wiki/Variable-length_quantity#Zigzag_encoding""";
